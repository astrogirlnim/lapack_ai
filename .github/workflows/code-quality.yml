name: Code Quality

on:
  push:
    branches: [ main, master, develop, feature-* ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-24.10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies for Fortran tools
      run: |
        # Add Ubuntu Toolchain PPA (main, not test) for gfortran-15
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/ppa
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gfortran-15 \
          build-essential \
          cmake
        # Create symlink for default gfortran command
        sudo ln -sf /usr/bin/gfortran-15 /usr/bin/gfortran
        echo "‚úÖ System dependencies installed with gfortran-15"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        echo "‚úÖ Python dependencies installed"

    - name: Cache pre-commit environments
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Install pre-commit hooks
      run: |
        echo "üîß Installing pre-commit hooks..."
        pre-commit install --install-hooks
        echo "‚úÖ Pre-commit hooks installed"

    - name: Run pre-commit on all files
      run: |
        echo "üîç Running pre-commit hooks on all files..."
        pre-commit run --all-files --verbose
        echo "‚úÖ Pre-commit checks completed"



  fortran-compilation:
    name: LAPACK Fortran compilation test
    runs-on: ubuntu-24.10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install build tools
      run: |
        # Add Ubuntu Toolchain PPA (main, not test) for gfortran-15
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/ppa
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gfortran-15 \
          libblas-dev \
          liblapack-dev \
          cmake
        # Create symlink for default gfortran command
        sudo ln -sf /usr/bin/gfortran-15 /usr/bin/gfortran
        echo "‚úÖ Build tools installed with gfortran-15"

        # Show compiler version for debugging
        echo "üîç Compiler information:"
        gfortran --version | head -2
        echo "‚úÖ Compiler verification completed"

    - name: Test core LAPACK module compilation
      run: |
        echo "üîß Testing core LAPACK module compilation..."
        cd SRC

        # Use LAPACK's standard gfortran flags
        GFORTRAN_FLAGS="-O2 -frecursive -Wall"
        COMPILE_ERRORS=0

        echo "üì¶ Compiling essential LAPACK modules..."

        # Compile LA_CONSTANTS module (required by many routines)
        if [ -f "la_constants.f90" ]; then
          echo "  üîç Compiling la_constants.f90..."
          if gfortran $GFORTRAN_FLAGS -c la_constants.f90 2>&1 | tee la_constants.log; then
            echo "    ‚úÖ la_constants.f90 compiled successfully"
          else
            echo "    ‚ùå la_constants.f90 compilation failed"
            cat la_constants.log
            COMPILE_ERRORS=$((COMPILE_ERRORS + 1))
          fi
        fi

        # Compile LA_XISNAN module (depends on LA_CONSTANTS)
        if [ -f "la_xisnan.F90" ]; then
          echo "  üîç Compiling la_xisnan.F90..."
          if gfortran $GFORTRAN_FLAGS -c la_xisnan.F90 2>&1 | tee la_xisnan.log; then
            echo "    ‚úÖ la_xisnan.F90 compiled successfully"
          else
            echo "    ‚ùå la_xisnan.F90 compilation failed"
            cat la_xisnan.log
            COMPILE_ERRORS=$((COMPILE_ERRORS + 1))
          fi
        fi

        # Test compilation of key LAPACK routines (sample from different categories)
        TEST_ROUTINES=(
          "dgemm.f"      # Basic linear algebra
          "dgesvd.f"     # SVD (critical routine)
          "dgesv.f"      # Linear system solver
          "dgetrf.f"     # LU factorization
          "dpotrf.f"     # Cholesky factorization
        )

        echo "üìä Testing compilation of key routines..."
        for routine in "${TEST_ROUTINES[@]}"; do
          if [ -f "$routine" ]; then
            echo "  üîç Compiling $routine..."
            if gfortran $GFORTRAN_FLAGS -c "$routine" 2>&1 | tee "${routine%.f}.log"; then
              echo "    ‚úÖ $routine compiled successfully"
            else
              echo "    ‚ùå $routine compilation failed"
              cat "${routine%.f}.log"
              COMPILE_ERRORS=$((COMPILE_ERRORS + 1))
            fi
          else
            echo "    ‚ö†Ô∏è $routine not found (skipped)"
          fi
        done

        # Clean up object files and logs
        echo "üßπ Cleaning up generated files..."
        rm -f *.o *.mod *.log

        # Report results
        if [ $COMPILE_ERRORS -eq 0 ]; then
          echo "‚úÖ All tested LAPACK routines compiled successfully"
        else
          echo "‚ùå Found $COMPILE_ERRORS compilation failures"
          exit 1
        fi

    - name: Test CMake configuration
      run: |
        echo "üîß Testing CMake configuration..."
        mkdir -p build
        cd build

        # Test that CMake can configure the build
        if cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=OFF ..; then
          echo "‚úÖ CMake configuration successful"
        else
          echo "‚ùå CMake configuration failed"
          exit 1
        fi

        # Test compilation of a small subset (quick feedback)
        echo "üîç Testing sample compilation with CMake..."
        if make -j2 blas > cmake_build.log 2>&1; then
          echo "‚úÖ Sample CMake build successful"
        else
          echo "‚ùå Sample CMake build failed"
          cat cmake_build.log
          exit 1
        fi

        echo "‚úÖ LAPACK compilation tests completed successfully"

  python-quality:
    name: Python code quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python quality tools
      run: |
        pip install black isort flake8 mypy
        echo "‚úÖ Python quality tools installed"

    - name: Check Python code formatting with Black
      run: |
        echo "üîç Checking Python code formatting..."
        find . -name "*.py" -not -path "./build/*" -not -path "./.venv/*" | head -10
        black --check --diff --color . || echo "‚ö†Ô∏è Python formatting issues found"

    - name: Check import sorting with isort
      run: |
        echo "üîç Checking Python import sorting..."
        isort --check-only --diff --color . || echo "‚ö†Ô∏è Import sorting issues found"

    - name: Lint with flake8
      run: |
        echo "üîç Linting Python code..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Python linting issues found"

  documentation-check:
    name: Documentation validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate YAML configuration files
      run: |
        echo "üîç Validating YAML files..."
        find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
          echo "  üìÑ Validating: $file"
          python -c "import yaml; yaml.safe_load(open('$file'))" || echo "    ‚ùå Invalid YAML: $file"
        done
        echo "‚úÖ YAML validation completed"

    - name: Check Markdown files
      run: |
        echo "üìö Checking Markdown documentation..."
        find . -name "*.md" | head -5 | while read -r file; do
          echo "  üìÑ Found: $file"
          # Basic check for common Markdown issues
          if grep -q $'\r' "$file"; then
            echo "    ‚ö†Ô∏è Windows line endings detected in $file"
          fi
        done
        echo "‚úÖ Markdown check completed"

  security-check:
    name: Security scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python for security tools
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install gitleaks
      run: |
        # Install gitleaks
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz \
          | tar -xz gitleaks
        sudo mv gitleaks /usr/local/bin/
        echo "‚úÖ Gitleaks installed"

    - name: Run gitleaks scan
      run: |
        echo "üîí Running gitleaks security scan..."
        gitleaks detect --config .gitleaks.toml --verbose --exit-code 1
        echo "‚úÖ Gitleaks scan completed"

    - name: Check for common security issues
      run: |
        echo "üîç Checking for common security patterns..."

        # Check for hardcoded passwords or keys
        if grep -r -i "password\|secret\|key" --include="*.py" --include="*.sh" . | grep -v "example\|test\|mock" | head -5; then
          echo "‚ö†Ô∏è Potential hardcoded credentials found (review needed)"
        else
          echo "‚úÖ No obvious hardcoded credentials detected"
        fi

  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [pre-commit, fortran-compilation, python-quality, documentation-check, security-check]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate summary report
      run: |
        echo "## üìä Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit hooks | ${{ needs.pre-commit.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Fortran compilation | ${{ needs.fortran-compilation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python quality | ${{ needs.python-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security scan | ${{ needs.security-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìù Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Run \`pre-commit install\` to enable hooks locally" >> $GITHUB_STEP_SUMMARY
        echo "- Use \`pre-commit run --all-files\` to format all code" >> $GITHUB_STEP_SUMMARY
        echo "- Fortran code quality is validated during compilation step" >> $GITHUB_STEP_SUMMARY

        echo "‚úÖ Quality check summary generated"
