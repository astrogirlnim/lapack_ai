name: Code Quality

on:
  push:
    branches: [ main, master, develop, feature-* ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-24.10

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies for Fortran tools
      run: |
        # Add Ubuntu Toolchain PPA (main, not test) for gfortran-15
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/ppa
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gfortran-15 \
          build-essential \
          cmake
        # Create symlink for default gfortran command
        sudo ln -sf /usr/bin/gfortran-15 /usr/bin/gfortran
        echo "✅ System dependencies installed with gfortran-15"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        echo "✅ Python dependencies installed"

    - name: Cache pre-commit environments
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Install pre-commit hooks
      run: |
        echo "🔧 Installing pre-commit hooks..."
        pre-commit install --install-hooks
        echo "✅ Pre-commit hooks installed"

    - name: Run pre-commit on all files
      run: |
        echo "🔍 Running pre-commit hooks on all files..."
        pre-commit run --all-files --verbose
        echo "✅ Pre-commit checks completed"

  python-quality:
    name: Python code quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python quality tools
      run: |
        pip install black isort flake8 mypy
        echo "✅ Python quality tools installed"

    - name: Check Python code formatting with Black
      run: |
        echo "🔍 Checking Python code formatting..."
        find . -name "*.py" -not -path "./build/*" -not -path "./.venv/*" | head -10
        black --check --diff --color . || echo "⚠️ Python formatting issues found"

    - name: Check import sorting with isort
      run: |
        echo "🔍 Checking Python import sorting..."
        isort --check-only --diff --color . || echo "⚠️ Import sorting issues found"

    - name: Lint with flake8
      run: |
        echo "🔍 Linting Python code..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Python linting issues found"

  documentation-check:
    name: Documentation validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate YAML configuration files
      run: |
        echo "🔍 Validating YAML files..."
        find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
          echo "  📄 Validating: $file"
          python -c "import yaml; yaml.safe_load(open('$file'))" || echo "    ❌ Invalid YAML: $file"
        done
        echo "✅ YAML validation completed"

    - name: Check Markdown files
      run: |
        echo "📚 Checking Markdown documentation..."
        find . -name "*.md" | head -5 | while read -r file; do
          echo "  📄 Found: $file"
          # Basic check for common Markdown issues
          if grep -q $'\r' "$file"; then
            echo "    ⚠️ Windows line endings detected in $file"
          fi
        done
        echo "✅ Markdown check completed"

  security-check:
    name: Security scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python for security tools
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install gitleaks
      run: |
        # Install gitleaks
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz \
          | tar -xz gitleaks
        sudo mv gitleaks /usr/local/bin/
        echo "✅ Gitleaks installed"

    - name: Run gitleaks scan
      run: |
        echo "🔒 Running gitleaks security scan..."
        gitleaks detect --config .gitleaks.toml --verbose --exit-code 1
        echo "✅ Gitleaks scan completed"

    - name: Check for common security issues
      run: |
        echo "🔍 Checking for common security patterns..."

        # Check for hardcoded passwords or keys
        if grep -r -i "password\|secret\|key" --include="*.py" --include="*.sh" . | grep -v "example\|test\|mock" | head -5; then
          echo "⚠️ Potential hardcoded credentials found (review needed)"
        else
          echo "✅ No obvious hardcoded credentials detected"
        fi

  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [pre-commit, python-quality, documentation-check, security-check]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate summary report
      run: |
        echo "## 📊 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit hooks | ${{ needs.pre-commit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python quality | ${{ needs.python-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security scan | ${{ needs.security-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Run \`pre-commit install\` to enable hooks locally" >> $GITHUB_STEP_SUMMARY
        echo "- Use \`pre-commit run --all-files\` to format all code" >> $GITHUB_STEP_SUMMARY
        echo "- Fortran code quality and compilation are handled by CMake build process" >> $GITHUB_STEP_SUMMARY

        echo "✅ Quality check summary generated"
