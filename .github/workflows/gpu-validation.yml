name: AlphaTensor GPU Validation on AWS

on:
  # Manual trigger only - no automatic runs
  workflow_dispatch:
    inputs:
      instance_type:
        description: 'AWS GPU instance type'
        required: true
        default: 'g4dn.xlarge'
        type: choice
        options:
          - g4dn.xlarge   # NVIDIA T4, $0.526/hr - Recommended
          - g4dn.2xlarge  # NVIDIA T4, $0.752/hr - More memory
          - g5.xlarge     # NVIDIA A10G, $1.006/hr - Latest gen
          - g5.2xlarge    # NVIDIA A10G, $1.212/hr - More resources
          - p3.2xlarge    # NVIDIA V100, $3.060/hr - High performance
      max_spot_price:
        description: 'Maximum spot price (USD/hour)'
        required: true
        default: '0.30'
        type: string
      test_branch:
        description: 'Git branch to test'
        required: true
        default: 'more-optimization-and-gpu-testing'
        type: string
      aws_region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
        type: choice
        options:
          - us-east-1      # N. Virginia - Cheapest
          - us-west-2      # Oregon - Good GPU availability
          - eu-west-1      # Ireland - EU option
      enable_ssh_access:
        description: 'Enable SSH access for debugging'
        required: false
        default: false
        type: boolean
      test_timeout_minutes:
        description: 'Test timeout (5-60 minutes)'
        required: false
        default: '20'
        type: string

env:
  TF_VAR_github_repo_url: ${{ github.server_url }}/${{ github.repository }}.git
  TF_VAR_test_branch: ${{ github.event.inputs.test_branch }}
  TF_VAR_instance_type: ${{ github.event.inputs.instance_type }}
  TF_VAR_max_spot_price: ${{ github.event.inputs.max_spot_price }}
  TF_VAR_aws_region: ${{ github.event.inputs.aws_region }}
  TF_VAR_enable_ssh_access: ${{ github.event.inputs.enable_ssh_access }}
  TF_VAR_test_timeout_minutes: ${{ github.event.inputs.test_timeout_minutes }}
  TF_VAR_results_bucket_name: "alphatensor-gpu-test-${{ github.run_id }}"

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      max_cost: ${{ steps.cost-check.outputs.max_cost }}
    steps:
      - name: Validate spot price
        run: |
          if (( $(echo "${{ github.event.inputs.max_spot_price }} > 1.0" | bc -l) )); then
            echo "‚ö†Ô∏è High spot price detected: ${{ github.event.inputs.max_spot_price }}"
            echo "Consider using a lower price to avoid unexpected costs"
          fi

      - name: Calculate maximum cost
        id: cost-check
        run: |
          timeout_minutes="${{ github.event.inputs.test_timeout_minutes }}"
          spot_price="${{ github.event.inputs.max_spot_price }}"
          max_cost=$(echo "scale=2; $spot_price * ($timeout_minutes / 60) * 1.5" | bc)
          echo "max_cost=$max_cost" >> $GITHUB_OUTPUT
          echo "üìä **Cost Estimate:**" >> $GITHUB_STEP_SUMMARY
          echo "- Spot Price Limit: \$${spot_price}/hour" >> $GITHUB_STEP_SUMMARY
          echo "- Test Duration: ${timeout_minutes} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **Maximum Cost: \$${max_cost}**" >> $GITHUB_STEP_SUMMARY

  gpu-testing:
    runs-on: ubuntu-latest
    needs: validate-inputs
    # environment: aws-gpu-testing  # Uncomment to require environment approval

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.test_branch }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"
          terraform_wrapper: false

      - name: Display configuration
        run: |
          echo "üöÄ **GPU Test Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Instance Type: ${{ github.event.inputs.instance_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- AWS Region: ${{ github.event.inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Branch: ${{ github.event.inputs.test_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- Max Spot Price: \${{ github.event.inputs.max_spot_price }}/hour" >> $GITHUB_STEP_SUMMARY
          echo "- SSH Access: ${{ github.event.inputs.enable_ssh_access }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Timeout: ${{ github.event.inputs.test_timeout_minutes }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: ${{ env.TF_VAR_github_repo_url }}" >> $GITHUB_STEP_SUMMARY

      - name: Generate SSH key (if SSH enabled)
        if: github.event.inputs.enable_ssh_access == 'true'
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/alphatensor-gpu-test -N ""
          echo "TF_VAR_ssh_public_key=$(cat ~/.ssh/alphatensor-gpu-test.pub)" >> $GITHUB_ENV
          echo "üîë SSH key generated for debugging access" >> $GITHUB_STEP_SUMMARY

      - name: Initialize Terraform
        working-directory: MODERNIZATION/terraform/gpu-testing
        run: |
          terraform init

      - name: Validate Terraform
        working-directory: MODERNIZATION/terraform/gpu-testing
        run: |
          terraform validate

      - name: Plan Terraform
        working-directory: MODERNIZATION/terraform/gpu-testing
        run: |
          terraform plan -out=tfplan

      - name: Apply Terraform
        working-directory: MODERNIZATION/terraform/gpu-testing
        run: |
          echo "üèóÔ∏è **Deploying GPU test infrastructure...**" >> $GITHUB_STEP_SUMMARY
          terraform apply tfplan

          # Capture outputs
          echo "INSTANCE_ID=$(terraform output -raw instance_id)" >> $GITHUB_ENV
          echo "RESULTS_BUCKET=$(terraform output -raw results_bucket)" >> $GITHUB_ENV
          echo "INSTANCE_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

          echo "- Instance ID: $(terraform output -raw instance_id)" >> $GITHUB_STEP_SUMMARY
          echo "- Public IP: $(terraform output -raw instance_public_ip)" >> $GITHUB_STEP_SUMMARY
          echo "- Results Bucket: $(terraform output -raw results_bucket)" >> $GITHUB_STEP_SUMMARY

      - name: Display monitoring information
        run: |
          echo "üìä **Monitor your test:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Console Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [EC2 Instance](https://console.aws.amazon.com/ec2/home?region=${{ github.event.inputs.aws_region }}#InstanceDetails:instanceId=${{ env.INSTANCE_ID }})" >> $GITHUB_STEP_SUMMARY
          echo "- [S3 Results](https://s3.console.aws.amazon.com/s3/buckets/${{ env.RESULTS_BUCKET }})" >> $GITHUB_STEP_SUMMARY
          echo "- [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=${{ github.event.inputs.aws_region }}#logsV2:log-groups)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CLI Commands:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Check instance status" >> $GITHUB_STEP_SUMMARY
          echo "aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query 'Reservations[0].Instances[0].State.Name'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Watch for results" >> $GITHUB_STEP_SUMMARY
          echo "aws s3 ls s3://${{ env.RESULTS_BUCKET }}/ --recursive" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: SSH connection info
        if: github.event.inputs.enable_ssh_access == 'true'
        run: |
          echo "üîê **SSH Access Enabled:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Save private key and connect:" >> $GITHUB_STEP_SUMMARY
          echo "ssh -i ~/.ssh/alphatensor-gpu-test ubuntu@${{ env.INSTANCE_IP }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          # Save private key as artifact
          mkdir -p ssh-keys
          cp ~/.ssh/alphatensor-gpu-test ssh-keys/

      - name: Upload SSH key artifact
        if: github.event.inputs.enable_ssh_access == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key
          path: ssh-keys/alphatensor-gpu-test
          retention-days: 1

      - name: Wait for test completion
        timeout-minutes: 35  # Max test timeout + buffer
        run: |
          echo "‚è≥ Waiting for test completion (max ${{ github.event.inputs.test_timeout_minutes }} minutes + 10 minute buffer)..."

          start_time=$(date +%s)
          timeout_seconds=$(( ${{ github.event.inputs.test_timeout_minutes }} * 60 + 600 ))

          while true; do
            current_time=$(date +%s)
            elapsed=$(( current_time - start_time ))

            if [ $elapsed -gt $timeout_seconds ]; then
              echo "‚ùå Timeout waiting for test completion"
              break
            fi

            # Check for test results in S3
            if aws s3 ls "s3://${{ env.RESULTS_BUCKET }}/" | grep -q "test_output.log"; then
              echo "‚úÖ Test results detected in S3"
              break
            fi

            # Check instance state
            instance_state=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query 'Reservations[0].Instances[0].State.Name' --output text)
            echo "Instance state: $instance_state (elapsed: $((elapsed / 60))m)"

            if [ "$instance_state" = "terminated" ] || [ "$instance_state" = "stopped" ]; then
              echo "‚úÖ Instance completed and shut down"
              break
            fi

            sleep 30
          done

      - name: Download and analyze results
        run: |
          echo "üì• **Downloading test results...**" >> $GITHUB_STEP_SUMMARY

          # Create results directory
          mkdir -p test-results

          # Download all results
          aws s3 cp "s3://${{ env.RESULTS_BUCKET }}/" ./test-results/ --recursive || echo "Some files may not be available yet"

          echo "üìÅ **Downloaded files:**" >> $GITHUB_STEP_SUMMARY
          ls -la test-results/ >> $GITHUB_STEP_SUMMARY || echo "No results directory found"

      - name: Parse test results
        run: |
          echo "üìä **Test Results Analysis:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if main test output exists
          if [ -f "test-results/*test_output.log" ]; then
            test_file=$(ls test-results/*test_output.log | head -1)
            echo "**Test Execution Status:**" >> $GITHUB_STEP_SUMMARY

            if grep -q "OVERALL RESULT: ALL TESTS PASSED" "$test_file"; then
              echo "‚úÖ **ALL TESTS PASSED** - GPU AlphaTensor validation successful!" >> $GITHUB_STEP_SUMMARY
            elif grep -q "OVERALL RESULT:" "$test_file"; then
              result=$(grep "OVERALL RESULT:" "$test_file")
              echo "‚ö†Ô∏è **Test Status:** $result" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùì **Test Status:** Unknown - check detailed logs" >> $GITHUB_STEP_SUMMARY
            fi

            # Extract key metrics
            if grep -q "Tests Passed:" "$test_file"; then
              test_summary=$(grep "Tests Passed:" "$test_file")
              echo "üìà **$test_summary**" >> $GITHUB_STEP_SUMMARY
            fi

            # GPU information
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**GPU Information:**" >> $GITHUB_STEP_SUMMARY
            if grep -q "GPU detected and available" "$test_file"; then
              echo "‚úÖ GPU properly detected and initialized" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è GPU detection issues - check platform compatibility" >> $GITHUB_STEP_SUMMARY
            fi

            if grep -q "Successfully compiled AlphaTensor kernels" "$test_file"; then
              echo "‚úÖ OpenCL kernels compiled successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è OpenCL kernel compilation issues" >> $GITHUB_STEP_SUMMARY
            fi

          else
            echo "‚ùå **No test output found** - execution may have failed" >> $GITHUB_STEP_SUMMARY
          fi

          # System information
          if [ -f "test-results/*system_info.txt" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**System Configuration:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -10 test-results/*system_info.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        with:
          name: gpu-test-results-${{ github.run_id }}
          path: test-results/
          retention-days: 30

      - name: Cost summary
        run: |
          # Calculate actual runtime
          if [ -f "test-results/*test_summary.json" ]; then
            duration=$(cat test-results/*test_summary.json | grep duration_seconds | head -1 | cut -d'"' -f4)
            if [ -n "$duration" ]; then
              actual_cost=$(echo "scale=2; ${{ github.event.inputs.max_spot_price }} * ($duration / 3600)" | bc)
              echo "üí∞ **Actual Cost: \$${actual_cost}**" >> $GITHUB_STEP_SUMMARY
              echo "‚è±Ô∏è **Runtime: $((duration / 60)) minutes**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Cleanup infrastructure
        if: always()
        working-directory: MODERNIZATION/terraform/gpu-testing
        run: |
          echo "üßπ **Cleaning up AWS resources...**" >> $GITHUB_STEP_SUMMARY
          terraform destroy -auto-approve
          echo "‚úÖ Infrastructure cleanup completed" >> $GITHUB_STEP_SUMMARY

  notification:
    runs-on: ubuntu-latest
    needs: [gpu-testing]
    if: always()
    steps:
      - name: Test completion notification
        run: |
          if [ "${{ needs.gpu-testing.result }}" = "success" ]; then
            echo "‚úÖ GPU validation completed successfully!"
          else
            echo "‚ùå GPU validation completed with issues"
          fi
          echo "Check the job summary for detailed results."
