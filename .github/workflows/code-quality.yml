name: Code Quality

on:
  push:
    branches: [ main, master, develop, feature-* ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies for Fortran tools
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gfortran \
          build-essential \
          cmake
        echo "‚úÖ System dependencies installed"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit fprettify
        echo "‚úÖ Python dependencies installed"

        # Verify fprettify installation
        fprettify --version
        echo "‚úÖ fprettify is available"

    - name: Cache pre-commit environments
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Install pre-commit hooks
      run: |
        echo "üîß Installing pre-commit hooks..."
        pre-commit install --install-hooks
        echo "‚úÖ Pre-commit hooks installed"

    - name: Run pre-commit on all files
      run: |
        echo "üîç Running pre-commit hooks on all files..."
        pre-commit run --all-files --verbose
        echo "‚úÖ Pre-commit checks completed"

    - name: Run fprettify on Fortran files (validation)
      run: |
        echo "üîç Additional fprettify validation..."

        # Find all Fortran files for processing
        FORTRAN_FILES=$(find . -name "*.f" -o -name "*.f90" -o -name "*.f95" -o -name "*.f03" -o -name "*.f08" \
                          -o -name "*.F" -o -name "*.F90" -o -name "*.F95" -o -name "*.F03" -o -name "*.F08" | \
                        grep -v build/ | grep -v CMakeFiles/ | grep -v DEPRECATED/ | head -20)

        if [ -n "$FORTRAN_FILES" ]; then
          echo "üìÅ Found Fortran files to check:"
          echo "$FORTRAN_FILES" | head -10

          # Test fprettify on a sample of files (check mode only)
          echo "$FORTRAN_FILES" | head -5 | while read -r file; do
            echo "  üîç Checking: $file"
            fprettify --diff "$file" || echo "    ‚ö†Ô∏è Formatting needed for $file"
          done
        else
          echo "‚ÑπÔ∏è No Fortran files found for processing"
        fi

        echo "‚úÖ fprettify validation completed"

  fortran-lint:
    name: Fortran-specific linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python for fprettify
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Fortran tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran
        pip install fprettify
        echo "‚úÖ Fortran tools installed"

        # Verify installations
        echo "üîç Verifying tool installations..."
        which gfortran || echo "‚ùå gfortran not found in PATH"
        gfortran --version | head -1 || echo "‚ùå gfortran version check failed"
        which fprettify || echo "‚ùå fprettify not found in PATH"
        fprettify --version || echo "‚ùå fprettify version check failed"
        echo "‚úÖ Tool verification completed"

    - name: Find Fortran files
      id: find-fortran
      run: |
        # Find Fortran files, excluding build artifacts and deprecated code
        FORTRAN_FILES=$(find . -type f \( -name "*.f" -o -name "*.f90" -o -name "*.f95" -o -name "*.f03" -o -name "*.f08" \
                          -o -name "*.F" -o -name "*.F90" -o -name "*.F95" -o -name "*.F03" -o -name "*.F08" \) \
                        -not -path "./build/*" \
                        -not -path "./CMakeFiles/*" \
                        -not -path "*/DEPRECATED/*" \
                        -not -name "*.mod" \
                        | wc -l)

        echo "fortran_count=$FORTRAN_FILES" >> $GITHUB_OUTPUT
        echo "üìä Found $FORTRAN_FILES Fortran files for linting"

    - name: Run syntax validation on Fortran files
      if: steps.find-fortran.outputs.fortran_count > 0
      run: |
        echo "üîç Running Fortran syntax validation..."

        # Debug environment before proceeding
        echo "üîç Debug info:"
        echo "  Current directory: $(pwd)"
        echo "  gfortran location: $(which gfortran || echo 'NOT FOUND')"
        echo "  SRC directory exists: $([ -d SRC ] && echo 'YES' || echo 'NO')"

        # Test compilation of key LAPACK source files to validate syntax
        cd SRC
        echo "  Changed to SRC directory: $(pwd)"
        echo "  Available .f files: $(ls *.f 2>/dev/null | wc -l || echo '0')"
        echo "  Available .f90 files: $(ls *.f90 2>/dev/null | wc -l || echo '0')"
        echo "  Available .F90 files: $(ls *.F90 2>/dev/null | wc -l || echo '0')"

        # Compile all required modules before syntax checking
        echo "üîß Compiling required modules..."
        # Compile LA_CONSTANTS module FIRST (required by la_xisnan.F90 and other .f90 files)
        if [ -f "la_constants.f90" ]; then
          echo "  üì¶ Compiling LA_CONSTANTS module..."
          gfortran -c la_constants.f90 2>&1 | tee laconstants_build.log
          MODULE_EXIT_CODE=${PIPESTATUS[0]}
          if [ $MODULE_EXIT_CODE -ne 0 ]; then
            echo "    ‚ùå Failed to compile LA_CONSTANTS module. See output above and in laconstants_build.log"
            cat laconstants_build.log
            exit 1
          else
            echo "    ‚úÖ LA_CONSTANTS module compiled successfully"
          fi
        fi
        # Compile LA_XISNAN module SECOND (depends on LA_CONSTANTS module)
        if [ -f "la_xisnan.F90" ]; then
          echo "  üì¶ Compiling LA_XISNAN module..."
          gfortran -c la_xisnan.F90 2>&1 | tee laxisnan_build.log
          MODULE_EXIT_CODE=${PIPESTATUS[0]}
          if [ $MODULE_EXIT_CODE -ne 0 ]; then
            echo "    ‚ùå Failed to compile LA_XISNAN module. See output above and in laxisnan_build.log"
            cat laxisnan_build.log
            exit 1
          else
            echo "    ‚úÖ LA_XISNAN module compiled successfully"
          fi
        fi

        # Select test files for validation (include both .f90 and .F90)
        TEST_FILES=($(ls *.f *.f90 *.F90 2>/dev/null | head -5))
        echo "  Selected test files: ${TEST_FILES[*]}"

        # Debug: Show which files we're actually going to test
        echo "  üîç Files to be syntax checked:"
        for file in "${TEST_FILES[@]}"; do
          echo "    - $file ($(wc -l < "$file" 2>/dev/null || echo '?') lines)"
        done

        SYNTAX_ERRORS=0

        for file in "${TEST_FILES[@]}"; do
          echo "  üîç Syntax checking: $file"

          # Capture gfortran output and exit code
          # Use LAPACK's official gfortran flags (from make.inc.gfortran)
          OUTPUT=$(gfortran -fsyntax-only -frecursive "$file" 2>&1)
          EXIT_CODE=$?

          # Check if we have any output (warnings or errors)
          if [ -z "$OUTPUT" ]; then
            echo "    ‚úÖ Clean compilation - no issues in $file"
          else
            # Check if output contains actual syntax errors or fatal errors
            if echo "$OUTPUT" | grep -q -E "(Error:|Fatal Error:)"; then
              echo "    ‚ùå Syntax errors in $file:"
              echo "$OUTPUT" | grep -E "(Error:|Fatal Error:)" | head -3
              SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
            else
              # Just warnings (common in legacy Fortran code)
              WARNING_COUNT=$(echo "$OUTPUT" | grep -c "Warning:" || echo "0")
              echo "    ‚ö†Ô∏è $WARNING_COUNT warnings in $file (acceptable for legacy Fortran):"
              echo "$OUTPUT" | grep "Warning:" | head -2 | sed 's/^/      /'
            fi
          fi
        done

        # Clean up generated module files
        echo "üßπ Cleaning up generated module files..."
        rm -f *.mod *.o

        if [ $SYNTAX_ERRORS -gt 0 ]; then
          echo "‚ùå Found $SYNTAX_ERRORS files with actual syntax errors"
          exit 1
        fi

        echo "‚úÖ Fortran syntax validation completed - warnings are acceptable"

  python-quality:
    name: Python code quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python quality tools
      run: |
        pip install black isort flake8 mypy
        echo "‚úÖ Python quality tools installed"

    - name: Check Python code formatting with Black
      run: |
        echo "üîç Checking Python code formatting..."
        find . -name "*.py" -not -path "./build/*" -not -path "./.venv/*" | head -10
        black --check --diff --color . || echo "‚ö†Ô∏è Python formatting issues found"

    - name: Check import sorting with isort
      run: |
        echo "üîç Checking Python import sorting..."
        isort --check-only --diff --color . || echo "‚ö†Ô∏è Import sorting issues found"

    - name: Lint with flake8
      run: |
        echo "üîç Linting Python code..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Python linting issues found"

  documentation-check:
    name: Documentation validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate YAML configuration files
      run: |
        echo "üîç Validating YAML files..."
        find . -name "*.yml" -o -name "*.yaml" | while read -r file; do
          echo "  üìÑ Validating: $file"
          python -c "import yaml; yaml.safe_load(open('$file'))" || echo "    ‚ùå Invalid YAML: $file"
        done
        echo "‚úÖ YAML validation completed"

    - name: Check Markdown files
      run: |
        echo "üìö Checking Markdown documentation..."
        find . -name "*.md" | head -5 | while read -r file; do
          echo "  üìÑ Found: $file"
          # Basic check for common Markdown issues
          if grep -q $'\r' "$file"; then
            echo "    ‚ö†Ô∏è Windows line endings detected in $file"
          fi
        done
        echo "‚úÖ Markdown check completed"

  security-check:
    name: Security scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python for security tools
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install gitleaks
      run: |
        # Install gitleaks
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz \
          | tar -xz gitleaks
        sudo mv gitleaks /usr/local/bin/
        echo "‚úÖ Gitleaks installed"

    - name: Run gitleaks scan
      run: |
        echo "üîí Running gitleaks security scan..."
        gitleaks detect --config .gitleaks.toml --verbose --exit-code 1
        echo "‚úÖ Gitleaks scan completed"

    - name: Check for common security issues
      run: |
        echo "üîç Checking for common security patterns..."

        # Check for hardcoded passwords or keys
        if grep -r -i "password\|secret\|key" --include="*.py" --include="*.sh" . | grep -v "example\|test\|mock" | head -5; then
          echo "‚ö†Ô∏è Potential hardcoded credentials found (review needed)"
        else
          echo "‚úÖ No obvious hardcoded credentials detected"
        fi

  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [pre-commit, fortran-lint, python-quality, documentation-check, security-check]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate summary report
      run: |
        echo "## üìä Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Pre-commit hooks | ${{ needs.pre-commit.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Fortran linting | ${{ needs.fortran-lint.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Python quality | ${{ needs.python-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security scan | ${{ needs.security-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìù Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Run \`pre-commit install\` to enable hooks locally" >> $GITHUB_STEP_SUMMARY
        echo "- Use \`pre-commit run --all-files\` to format all code" >> $GITHUB_STEP_SUMMARY
        echo "- Run \`fprettify --diff [file]\` to preview Fortran formatting" >> $GITHUB_STEP_SUMMARY

        echo "‚úÖ Quality check summary generated"
