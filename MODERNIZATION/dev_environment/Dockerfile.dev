# LAPACK AI Modernization - Development Environment
# Extends base image with development tools and configurations

# Start from our base image
FROM lapack-ai-base:latest

# Switch back to root for development setup
USER root

# Install additional development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Development and debugging
    vim \
    nano \
    tree \
    curl \
    wget \
    # Network debugging
    net-tools \
    iputils-ping \
    # Process monitoring
    procps \
    # File utilities
    rsync \
    unzip \
    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Jupyter and development extensions
RUN pip install --no-cache-dir \
    jupyter-lab \
    jupyterlab-git \
    ipywidgets \
    plotly \
    seaborn

# Configure Jupyter for container access
RUN mkdir -p /home/lapack/.jupyter && \
    echo "c.ServerApp.ip = '0.0.0.0'" > /home/lapack/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.port = 8888" >> /home/lapack/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.open_browser = False" >> /home/lapack/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.token = ''" >> /home/lapack/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.password = ''" >> /home/lapack/.jupyter/jupyter_lab_config.py && \
    chown -R lapack:lapack /home/lapack/.jupyter

# Set up development directories with proper permissions
RUN mkdir -p /opt/lapack-ai/{notebooks,tests,examples,docs} && \
    chown -R lapack:lapack /opt/lapack-ai

# Copy development scripts
COPY MODERNIZATION/dev_environment/setup_env.sh /opt/lapack-ai/setup_env.sh
RUN chmod +x /opt/lapack-ai/setup_env.sh && \
    chown lapack:lapack /opt/lapack-ai/setup_env.sh

# Configure environment for GPU development
ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    CUDA_CACHE_PATH=/tmp/cuda_cache \
    FLASK_ENV=development \
    FLASK_DEBUG=1

# Create GPU cache directories
RUN mkdir -p /tmp/cuda_cache && \
    chown -R lapack:lapack /tmp/cuda_cache && \
    chmod 755 /tmp/cuda_cache

# Development environment variables
ENV PYTHONPATH=/opt/lapack-ai/src:/opt/lapack-ai/MODERNIZATION \
    CMAKE_BUILD_TYPE=Debug \
    LAPACK_AI_DEBUG=1 \
    LOG_LEVEL=DEBUG

# Expose ports for development services
EXPOSE 8888 5000 5001 8080

# Create startup script for development
RUN cat > /opt/lapack-ai/dev_startup.sh << 'EOF'
#!/bin/bash
set -e

echo "=== LAPACK AI Development Environment Starting ==="

# Source environment setup
source /opt/lapack-ai/setup_env.sh

# Check system information
echo "=== System Information ==="
echo "Python version: $(python --version)"
echo "GCC version: $(gcc --version | head -n1)"
echo "Gfortran version: $(gfortran --version | head -n1)"
echo "CMake version: $(cmake --version | head -n1)"
echo "OpenCL info:"
clinfo -l 2>/dev/null || echo "No OpenCL devices found (this is normal without GPU)"

# Test Python environment
echo "=== Testing Python Environment ==="
python -c "
import numpy as np
import scipy
import pybind11
print(f'NumPy: {np.__version__}')
print(f'SciPy: {scipy.__version__}')
print(f'Pybind11: {pybind11.__version__}')
try:
    import pyopencl as cl
    print(f'PyOpenCL: {cl.VERSION_TEXT}')
    platforms = cl.get_platforms()
    print(f'OpenCL platforms: {len(platforms)}')
    for i, platform in enumerate(platforms):
        print(f'  Platform {i}: {platform.name}')
except Exception as e:
    print(f'PyOpenCL not available: {e}')
"

# Check file permissions
echo "=== Development Environment Ready ==="
echo "Working directory: $(pwd)"
echo "User: $(whoami)"
echo "Available services:"
echo "  - Jupyter Lab: http://localhost:8888"
echo "  - Flask Dashboard: http://localhost:5000"
echo "  - Monitoring: http://localhost:5001"

# Start services based on command line arguments
if [ "$1" = "jupyter" ]; then
    echo "Starting Jupyter Lab..."
    jupyter lab --allow-root
elif [ "$1" = "flask" ]; then
    echo "Starting Flask development server..."
    cd /opt/lapack-ai && python -m flask run --host=0.0.0.0 --port=5000
elif [ "$1" = "test" ]; then
    echo "Running tests..."
    cd /opt/lapack-ai && python -m pytest tests/ -v
elif [ "$1" = "build" ]; then
    echo "Building LAPACK..."
    cd /opt/lapack-ai && ./scripts/build_lapack.sh
else
    echo "Available commands:"
    echo "  jupyter  - Start Jupyter Lab"
    echo "  flask    - Start Flask development server"
    echo "  test     - Run test suite"
    echo "  build    - Build LAPACK"
    echo ""
    echo "Starting interactive shell..."
    exec /bin/bash
fi
EOF

RUN chmod +x /opt/lapack-ai/dev_startup.sh && \
    chown lapack:lapack /opt/lapack-ai/dev_startup.sh

# Switch back to development user
USER lapack

# Set working directory for development
WORKDIR /opt/lapack-ai

# Health check for development environment
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=3 \
    CMD python -c "import numpy, scipy, flask; print('Development environment healthy')" || exit 1

# Default command runs development startup script
ENTRYPOINT ["/opt/lapack-ai/dev_startup.sh"]
CMD ["interactive"] 